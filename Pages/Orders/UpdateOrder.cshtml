@page
@{
    Layout = "_AdminLayout";
}

<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4">
        <span class="text-muted fw-light">Orders /</span> Update Order
    </h4>
    <div class="col-xl">
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Udpate order</h5>
                <small class="text-muted float-end">Update label</small>
            </div>
            <div class="card-body">
                <div class="order-detail">
                    <div class="mb-3">
                        <p><strong>Order ID:</strong> <span id="orderId"></span></p>
                        <p><strong>User ID:</strong> <span id="userId"></span></p>
                        <p><strong>Created At:</strong> <span id="createdAt"></span></p>
                        <p><strong>Shipping Fee:</strong> <span id="shippingFee"></span></p>
                        <p><strong>Sub Total:</strong> <span id="subTotal"></span></p>
                        <p><strong>Total Price:</strong> <span id="totalPrice"></span></p>

                        <p><strong>Payment Method:</strong> <span id="paymentMethod"></span></p>

                        <div hidden>
                            <p><strong>Delivery Address:</strong> <span id="deliveryAddress"></span></p>
                            <p><strong>Phone Number:</strong> <span id="phoneNumber"></span></p>
                            <p><strong>Payment Status:</strong> <span id="paymentStatus"></span></p>
                            <p><strong>Order Status:</strong> <span id="orderStatus"></span></p>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="newPaymentStatus"><strong>New Order Status:</strong></label>
                        <select class="form-select color-dropdown" id="newPaymentStatus" name="newPaymentStatus">
                            <option value="Pending">Pending</option>
                            <option value="Accepted">Accepted</option>
                            <option value="Refunded">Refunded</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="newOrderStatus"><strong>New Payment Status:</strong></label>
                        <select class="form-select color-dropdown" id="newOrderStatus" name="newOrderStatus">
                            <option value="Created">Created</option>
                            <option value="Shipped">Shipped</option>
                            <option value="Returned">Returned</option>
                            <option value="Delivered">Delivered</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="newDeliveryAddress">New Delivery Address:</label>
                        <input class="form-control" type="text" id="newDeliveryAddress" name="newDeliveryAddress" value="">
                    </div>
                    <div class="mb-3">
                        <label for="newPhoneNumber">New Phone Number:</label>
                        <input class="form-control" type="text" id="newPhoneNumber" name="newPhoneNumber" value="">
                    </div>

                    <button class="btn btn-primary" id="updateButton">Update Order</button>
                    <a href="/Orders/Index" class="btn btn-secondary">Back</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', async () => {
        const token = sessionStorage.getItem("Token");

        if (!token) {
            window.location.href = "/error/AccessDenied.html";
            return;
        }

        const apiService = axios.create({
            baseURL: 'https://fspa.azurewebsites.net/api/',
            timeout: 5000,
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        const urlParams = new URLSearchParams(window.location.search);
        const orderId = urlParams.get('id');

        if (orderId) {
            fetchOrderById(orderId);
        } else {
            console.error('Order ID not provided in URL.');
        }

        async function fetchOrderById(orderId) {
            try {
                const response = await apiService.get(`Order/${orderId}`);
                if (response.status !== 200) {
                    throw new Error('Network response was not ok');
                }
                const data = response.data;

                renderOrder(data);
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }

        function renderOrder(order) {
            const orderIdSpan = document.getElementById('orderId');
            const userIdSpan = document.getElementById('userId');
            const createdAtSpan = document.getElementById('createdAt');
            const shippingFeeSpan = document.getElementById('shippingFee');
            const subTotalSpan = document.getElementById('subTotal');
            const totalPriceSpan = document.getElementById('totalPrice');
            const deliveryAddressSpan = document.getElementById('deliveryAddress');
            const phoneNumberSpan = document.getElementById('phoneNumber');
            const paymentMethodSpan = document.getElementById('paymentMethod');
            const paymentStatusSpan = document.getElementById('paymentStatus');
            const orderStatusSpan = document.getElementById('orderStatus');
            const newPaymentStatusInput = document.getElementById('newPaymentStatus');
            const newOrderStatusInput = document.getElementById('newOrderStatus');
            const newDeliveryAddressInput = document.getElementById('newDeliveryAddress');
            const newPhoneNumberInput = document.getElementById('newPhoneNumber');
            const updateButton = document.getElementById('updateButton');
            const backButton = document.getElementById('backButton');

            newPaymentStatusInput.value = order.paymentStatus;
            newOrderStatusInput.value = order.orderStatus;
            newDeliveryAddressInput.value = order.deliveryAddress;
            newPhoneNumberInput.value = order.phoneNumber;

            orderIdSpan.innerHTML = order.id;
            userIdSpan.innerHTML = order.userId;
            createdAtSpan.innerHTML = new Date(order.createdAt).toLocaleString();
            shippingFeeSpan.innerHTML = order.shippingFee;
            subTotalSpan.innerHTML = order.subTotal;
            totalPriceSpan.innerHTML = order.totalPrice;
            deliveryAddressSpan.innerHTML = order.deliveryAddress;
            phoneNumberSpan.innerHTML = order.phoneNumber;
            paymentMethodSpan.innerHTML = order.paymentMethod;
            paymentStatusSpan.innerHTML = order.paymentStatus;
            orderStatusSpan.innerHTML = order.orderStatus;

            updateButton.addEventListener('click', async () => {
                const newPaymentStatus = newPaymentStatusInput.value;
                const newOrderStatus = newOrderStatusInput.value;
                const newDeliveryAddress = newDeliveryAddressInput.value;
                const newPhoneNumber = newPhoneNumberInput.value;

                try {
                    await updateOrder(order.id, newPaymentStatus, newOrderStatus, newDeliveryAddress, newPhoneNumber);
                    alert('Order updated successfully!');
                    window.location.href = "/Orders/Index";
                    fetchOrderById(order.id);
                } catch (error) {
                    console.error('Update error:', error);
                    alert('Error updating order. Please try again.');
                }
            });


            backButton.addEventListener('click', () => {
                history.back();
            });
        }

        async function updateOrder(orderId, newPaymentStatus, newOrderStatus, newDeliveryAddress, newPhoneNumber) {
            console.log('Updating order with the following data:');
            console.log('Order ID:', orderId);
            console.log('New Payment Status:', newPaymentStatus);
            console.log('New Order Status:', newOrderStatus);
            console.log('New Delivery Address:', newDeliveryAddress);
            console.log('New Phone Number:', newPhoneNumber);
            try {
                const response = await apiService.put(`Order/${orderId}`, null, {
                    params: {
                        paymentStatus: newPaymentStatus,
                        orderStatus: newOrderStatus,
                        deliveryAddress: newDeliveryAddress,
                        phoneNumber: newPhoneNumber
                    }
                });
                if (response.status !== 200) {
                    throw new Error('Network response was not ok');
                }
            } catch (error) {
                console.error('Update error:', error);
                throw error;
            }
        }
    });
</script>
