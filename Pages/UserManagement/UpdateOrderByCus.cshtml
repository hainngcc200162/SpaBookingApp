@page
@{
    Layout = "_Layout";
}

<style>
    .order-detail {
        max-width: 100%;
        background-color: #f8f9fa;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .order-detail h1 {
        font-size: 24px;
        margin-bottom: 20px;
    }

    .order-property {
        margin-bottom: 15px;
    }

    .order-detail p {
        margin-bottom: 15px;
    }

    .form-group {
        margin-bottom: 20px;
    }


    .hidden-details {
        display: none;
    }

    .btn-update:hover {
        background-color: #292d31;
    }
@* 
    /* CSS cho nút "Cancelled" */
    #cancelButton {
        padding: 10px 20px;
        background-color: #ff0000;
        /* Màu đỏ */
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        float: right;
        /* Đặt nút bên phải */
        margin-left: 10px;
        /* Để tạo khoảng cách giữa nút "Cancelled" và nút "Update Booking" */
    } *@
</style>

<div class="col-12 col-md-8 col-lg-6 col-xl-5">
    <div class="card-body p-4">
        <h3 class="mb-4 text-center">Update Order</h3>
        <div class="order-detail" id="orderForm">
            <div class="form-group">
                <p class="form-label"><strong>Order ID:</strong> <span id="orderId"></span></p>
                <p class="form-label"><strong>Created At:</strong> <span id="createdAt"></span></p>
                <p class="form-label"><strong>Shipping Fee:</strong> <span id="shippingFee"></span></p>
                <p class="form-label"><strong>Sub Total:</strong> <span id="subTotal"></span></p>
                <p class="form-label"><strong>Total Price:</strong> <span id="totalPrice"></span></p>
                <p class="form-label"><strong>Payment Method:</strong> <span id="paymentMethod"></span></p>
                <div class="hidden-details">
                    <p class="form-label"><strong>Delivery Address:</strong> <span id="deliveryAddress"></span></p>
                    <p class="form-label"><strong>Phone Number:</strong> <span id="phoneNumber"></span></p>
                </div>
                <p class="form-label"><strong>Payment Status:</strong> <span id="paymentStatus"></span></p>
                <p class="form-label"><strong>Order Status:</strong> <span id="orderStatus"></span></p>
            </div>

            <div class="form-group">
                <label class="form-label" for="newDeliveryAddress">Delivery Address:</label>
                <input class="form-control" type="text" id="newDeliveryAddress" name="newDeliveryAddress" required>
            </div>

            <div class="form-group">
                <label class="form-label" for="newPhoneNumber">Phone Number:</label>
                <input class="form-control" type="text" id="newPhoneNumber" name="newPhoneNumber" required>
            </div>

            <button class="btn btn-dark btn-lg btn-block" id="updateButton">Update Order</button>
        </div>
        <div class="d-grid gap-2 col-12 mx-auto mt-4">
            <button class="btn btn-secondary" id="backButton">Back</button>
            <button id="cancelButton" class="btn btn-danger">Cancel Order</button>

        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    var alertDisplayed = false;
    var alertDisplayed2 = false;
    var alertDisplayed3 = false;
    document.addEventListener('DOMContentLoaded', async () => {
        const token = sessionStorage.getItem("Token");

        if (!token) {
            window.location.href = "/error/AccessDenied.html";
            return;
        }

        const apiService = axios.create({
            baseURL: 'https://fspa.azurewebsites.net/',
            timeout: 5000,
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        const urlParams = new URLSearchParams(window.location.search);
        const orderId = urlParams.get('id');

        if (orderId) {
            fetchOrderById(orderId);
        } else {
            console.error('Order ID not provided in URL.');
        }

        async function fetchOrderById(orderId) {
            try {
                const response = await apiService.get(`Order/${orderId}`);
                if (response.status !== 200) {
                    throw new Error('Network response was not ok');
                }
                const data = response.data;

                renderOrder(data);
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }

        function renderOrder(order) {
            const orderIdSpan = document.getElementById('orderId');
            const createdAtSpan = document.getElementById('createdAt');
            const shippingFeeSpan = document.getElementById('shippingFee');
            const subTotalSpan = document.getElementById('subTotal');
            const totalPriceSpan = document.getElementById('totalPrice');
            const deliveryAddressSpan = document.getElementById('deliveryAddress');
            const phoneNumberSpan = document.getElementById('phoneNumber');
            const paymentMethodSpan = document.getElementById('paymentMethod');
            const paymentStatusSpan = document.getElementById('paymentStatus');
            const orderStatusSpan = document.getElementById('orderStatus');
            const newDeliveryAddressInput = document.getElementById('newDeliveryAddress');
            const newPhoneNumberInput = document.getElementById('newPhoneNumber');
            const updateButton = document.getElementById('updateButton');
            const backButton = document.getElementById('backButton');

            orderIdSpan.innerHTML = order.id;
            createdAtSpan.innerHTML = new Date(order.createdAt).toLocaleString();
            shippingFeeSpan.innerHTML = order.shippingFee;
            subTotalSpan.innerHTML = order.subTotal;
            totalPriceSpan.innerHTML = order.totalPrice;
            deliveryAddressSpan.innerHTML = order.deliveryAddress;
            phoneNumberSpan.innerHTML = order.phoneNumber;
            paymentMethodSpan.innerHTML = order.paymentMethod;
            paymentStatusSpan.innerHTML = order.paymentStatus;
            orderStatusSpan.innerHTML = order.orderStatus;

            function hideAlerts() {
                var alerts = document.querySelectorAll('.alert');
                alerts.forEach(alert => {
                    alert.style.display = 'none';
                });

                alertDisplayed = false;
                alertDisplayed2 = false;
                alertDisplayed3 = false;
            }

            // Set initial values for newDeliveryAddress and newPhoneNumber
            newDeliveryAddressInput.value = order.deliveryAddress;
            newPhoneNumberInput.value = order.phoneNumber;

            updateButton.addEventListener('click', async () => {
                const newDeliveryAddress = document.getElementById('newDeliveryAddress').value;
                const newPhoneNumber = document.getElementById('newPhoneNumber').value;

                console.log('New Delivery Address:', newDeliveryAddress);
                console.log('New Phone Number:', newPhoneNumber);
                hideAlerts();

                try {
                    await updateOrderByCus(order.id, newDeliveryAddress, newPhoneNumber);
                    alert('Order updated successfully!');
                    window.location.href = "/UserManagement/OrderHistory";
                    fetchOrderById(order.id);
                } catch (error) {
                    if (error.response) {
                        if (!alertDisplayed) {
                            console.log(error.response.data.message);
                            var parentElement = document.getElementById("orderForm");

                            var alertElement = document.createElement("div");
                            alertElement.className = "mb-3 alert alert-danger";
                            alertElement.setAttribute("role", "alert");
                            alertElement.textContent = error.response.data.message;

                            parentElement.insertBefore(alertElement, parentElement.firstChild);
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                            alertDisplayed = true;
                        }
                    } else {
                        console.log("Network Error or Unknown Error: " + error.message);
                    }
                }
            });

            const cancelButton = document.getElementById('cancelButton');

            cancelButton.addEventListener('click', async () => {
            const newDeliveryAddress = document.getElementById('newDeliveryAddress').value;
            const newPhoneNumber = document.getElementById('newPhoneNumber').value;
            hideAlerts();

            // Check if the order status is 'Created' before allowing cancellation
            if (order.orderStatus === 'Created') {
                try {
                    await cancelOrder(order.id, orderStatus, newDeliveryAddress, newPhoneNumber);
                    alert('Order has been cancelled successfully!');
                    window.location.href = "/UserManagement/OrderHistory";
                    fetchOrderById(order.id);
                } catch (error) {
                    if (error.response) {
                        if (!alertDisplayed2) {
                            console.log(error.response.data.message);
                            var parentElement = document.getElementById("orderForm");

                            var alertElement = document.createElement("div");
                            alertElement.className = "mb-3 alert alert-danger";
                            alertElement.setAttribute("role", "alert");
                            alertElement.textContent = error.response.data.message;

                            parentElement.insertBefore(alertElement, parentElement.firstChild);
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                            alertDisplayed2 = true;
                        }
                    } else {
                        console.log("Network Error or Unknown Error: " + error.message);
                    }
                }
            } else {
                if (!alertDisplayed3) {
                            var parentElement = document.getElementById("orderForm");

                            var alertElement = document.createElement("div");
                            alertElement.className = "mb-3 alert alert-danger";
                            alertElement.setAttribute("role", "alert");
                            alertElement.textContent = "Orders cannot be cancelled when the order status is not Created.";

                            parentElement.insertBefore(alertElement, parentElement.firstChild);
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                            alertDisplayed3 = true;
                        }
                // You can display an alert, update the UI, or take other actions here.
            }
        });


            backButton.addEventListener('click', () => {
                history.back();
            });
        }

        async function cancelOrder(orderId, orderStatus, newDeliveryAddress, newPhoneNumber) {
            try {
                const response = await apiService.put(`Order/${orderId}`, null, {
                    params: {
                        orderStatus: 'Cancelled',
                        deliveryAddress: newDeliveryAddress,
                        phoneNumber: newPhoneNumber
                    }
                });
                if (response.status !== 200) {
                    throw new Error('Network response was not ok');
                }
            } catch (error) {
                console.error('Cancel order error:', error.message);
                throw error;
            }
        }

        async function updateOrderByCus(orderId, newDeliveryAddress, newPhoneNumber) {

            console.log('Updating order with the following data:');
            console.log('Order ID:', orderId);
            console.log('New Delivery Address:', newDeliveryAddress);
            console.log('New Phone Number:', newPhoneNumber);
            try {
                const response = await apiService.put(`Order/UpdateOrderByCus/${orderId}`, null, {
                    params: {
                        deliveryAddress: newDeliveryAddress,
                        phoneNumber: newPhoneNumber
                    }
                });
                if (response.status !== 200) {
                    throw new Error('Network response was not ok');
                }
            } catch (error) {
                console.error('Update error:', error);
                throw error;
            }
        }
    });
</script>
