@page
@model SpaBookingApp.Pages.Home.GetCartsModel
@{
    Layout = "_MyLayout";
}
<div>
    <section class="bg0 p-t-100 p-b-80">
        <div class="container">
            <!-- breadcrumb -->
            <div class="container">
                <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg">
                    <a href="index.html" class="stext-109 cl8 hov-cl1 trans-04">
                        Home
                        <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
                    </a>

                    <span class="stext-109 cl4">
                        Shoping Cart
                    </span>
                </div>
            </div>
            <div class="row p-b-20">
                <!-- Shoping Cart -->
                <div class="bg0 p-t-20 p-b-85">
                    <div class="container">
                        <div class="col-lg-12 col-xl-12 m-lr-auto m-b-50">
                            <div class="m-l-20 m-r-20 m-lr-0-xl">
                                <div id="cart-items"
                                    class="wrap-table-shopping-cart">
                                    @if (Model.CartDto != null &&
                                    Model.CartDto.CartItems != null &&
                                    Model.CartDto.CartItems.Count > 0)
                                    {
                                        <table class="table-shopping-cart">
                                            <tr>
                                                <th class="column-1">Product</th>
                                                <th class="column-2">Name</th>
                                                <th class="column-3">Quantity</th>
                                                <th class="column-4">Price</th>
                                                <th class="column-5">Quantity in sock</th>
                                                <th class="column-6">Total</th>
                                                <th></th>
                                                <th></th>
                                            </tr>
                                            @foreach (var item in
                                           Model.CartDto.CartItems)
                                            {
                                                <tr class="cart-item table_row">
                                                    <td class="column-1">
                                                        <div>
                                                            <img
                                                                src="@item.SpaProduct.PosterName"
                                                                alt="Product Poster"
                                                                style="width: 100px;">
                                                        </div>
                                                    </td>
                                                    <td class="column-2">@item.SpaProduct.Name</td>
                                                    <td class="column-3 align="center">
                                                        <div class="wrap-num-product flex-w">
                                                            <div class="btn-num-product-down cl8 hov-btn3 trans-04 flex-c-m">
                                                                <i class="fs-16 zmdi zmdi-minus"></i>
                                                            </div>
                                                            <input type="number" class="flex-c-m stext-101 cl2 size-105 bg8 bor13 hov-btn3 p-lr-15 trans-04 pointer m-tb-10" data-product-id="${item.spaProduct.id}" min="0" value="${item.quantity}">
                                                            <div class="btn-num-product-up cl8 hov-btn3 trans-04 flex-c-m">
                                                                <i class="fs-16 zmdi zmdi-plus"></i>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td class="column-4">$@item.SpaProduct.Price</td>
                                                    <td class="column-5">$@item.SpaProduct.QuantityInStock</td>
                                                    <td class="column-6">$@(item.Quantity *
                                                           item.SpaProduct.Price)</td>
                                                    <td>
                                                        <button
                                                            class="update-button"
                                                            data-product-id="@item.SpaProduct.Id"
                                                            onclick="updateCart(@item.SpaProduct.Id)">Update
                                                        </button>
                                                    </td>
                                                    <td>
                                                        <button
                                                            class="remove-button"
                                                            data-product-id="@item.SpaProduct.Id"
                                                            onclick="removeCartItem(@item.SpaProduct.Id)">Remove
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </table>
                                    }
                                    else
                                    {
                                        <p>Your cart is empty.</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<div id="cart-summary">
    <!-- Cart summary will be updated here -->
</div>

<a href="#" class="button secondary-button" onclick="clearCart()">Clear
    Cart</a>
<a href="/SpaProducts/Index" class="button secondary-button">Continue
    Shopping</a>

<script>
    async function removeCartItem(productId) {
        console.log(`Removing item with productId ${productId}`);
        const quantityInput = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
        quantityInput.value = 0;

        updateCart(productId);
        fetchCart();
    }

    async function updateCart(productId) {
        const quantityInput = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
        const quantity = parseInt(quantityInput.value);

        const cartItems = Array.from(document.querySelectorAll('.quantity-input'));
        const updatedProductIdentifiers = cartItems
            .filter(input => parseInt(input.value) > 0)
            .map(input => {
                const id = input.getAttribute('data-product-id');
                const q = (id === productId) ? quantity : parseInt(input.value);
                return Array(q).fill(id);
            })
            .flat()
            .join('-');

        try {
            const apiUrl = `/api/Cart/?productIdentifiers=${updatedProductIdentifiers}`;
            const response = await fetch(apiUrl, {
                method: 'PUT'
            });

            if (response.ok) {
                const cartData = await response.json();
                if (cartData.cartItems.length === 0) {
                    cartData.cartItems = [];
                }
                fetchCart();
            } else {
                fetchCart();
            }
        } catch (error) {
            console.error('An error occurred while updating cart data:', error);
        }
    }

    async function fetchCart() {
        try {
            const response = await fetch('/api/Cart');
            if (response.ok) {
                const cartData = await response.json();
                updateCartView(cartData);
            } else {
                console.error('Failed to fetch cart data.');
            }
        } catch (error) {
            console.error('An error occurred while fetching cart data:', error);
        }
    }

    function updateCartView(cartData) {
        const cartItemsElement = document.getElementById('cart-items');
        const table = cartItemsElement.querySelector('table');

        if (cartData && cartData.cartItems && cartData.cartItems.length > 0) {
            const tbody = table.querySelector('tbody');
            tbody.innerHTML = '';
            table.className = "table-shopping-cart";

            const tableHeader = `
                <tr class="table_head text-center" >
                    <th class="column-1">Product</th>
                    <th class="column-2">Name</th>
                    <th class="column-3">Quantity</th>
                    <th class="column-4">Price</th>
                    <th class="column-5">Total</th>
                    <th></th>
                    <th class="column-6"></th>
                    <th></th>
                </tr>
            `;

            tbody.insertAdjacentHTML('beforeend', tableHeader);

            cartData.cartItems.forEach(item => {
                const row = tbody.insertRow();
                row.className = 'cart-item table_row';
                row.innerHTML = `
                    <td class="column-1">
                        <div class="how-itemcart1" >
                            <img src="${item.spaProduct.posterName}" alt="IMG">
                        </div>
                    </td>
                    <td class="column-2">${item.spaProduct.name}</td>
                    <td class="column-3 align="center">
                        <div class="wrap-num-product flex-w">
                            <div class="btn-num-product-down cl8 hov-btn3 trans-04 flex-c-m">
                                <i class="fs-16 zmdi zmdi-minus"></i>
                            </div>
                            <input type="number" class="flex-c-m stext-101 cl2 size-105 bg8 bor13 hov-btn3 p-lr-15 trans-04 pointer m-tb-10" data-product-id="${item.spaProduct.id}" min="0" value="${item.quantity}">
                            <div class="btn-num-product-up cl8 hov-btn3 trans-04 flex-c-m">
                                <i class="fs-16 zmdi zmdi-plus"></i>
                            </div>
                        </div>
                    </td>

                    <td class="column-4">$${item.spaProduct.price}</td>

                    <td class="column-5">$${(item.spaProduct.price * item.quantity).toFixed(2)}</td>
                    
                    <td>
                        <button class="flex-c-m stext-101 cl0 size-101 bg3 bor14 hov-btn3 p-lr-5 trans-04 pointer" data-product-id="${item.spaProduct.id}" onclick="updateCart(${item.spaProduct.id})">Update</button>
                    </td>
                    <td class="column-6"></td>
                    <td>
                        <button class="flex-c-m stext-101 cl0 size-101 bg3 bor14 hov-btn3 p-lr-5 trans-04 pointer"" data-product-id="${item.spaProduct.id}" onclick="removeCartItem(${item.spaProduct.id})">Remove</button>
                    </td>
                `;

                const plusButton = row.querySelector('.btn-num-product-up');
                const minusButton = row.querySelector('.btn-num-product-down');
                const quantityInput = row.querySelector('.quantity-input');

                let tempQuantity = parseInt(quantityInput.value);

                plusButton.addEventListener('click', () => {
                    tempQuantity += 1;
                    quantityInput.value = tempQuantity;
                });

                minusButton.addEventListener('click', () => {
                    if (tempQuantity > 0) {
                        tempQuantity -= 1;
                        quantityInput.value = tempQuantity;
                    }
                });
            });
        } else {
            table.innerHTML = '';
            cartItemsElement.innerHTML = '<p>Your cart is empty.</p>';
        }

        const cartSummaryElement = document.getElementById('cart-summary');
        cartSummaryElement.innerHTML = `
            <p><strong>Subtotal:</strong> $${cartData.subTotal.toFixed(2)}</p>
            <p><strong>Shipping Fee:</strong> $${cartData.shippingFee.toFixed(2)}</p>
            <p><strong>Total Price:</strong> $${cartData.totalPrice.toFixed(2)}</p>
        `;
    }

    async function clearCart() {
        try {
            const response = await fetch('/api/Cart', {
                method: 'DELETE'
            });

            if (response.ok) {
                await fetchCart();
            } else {
                console.error('Failed to clear cart.');
            }
        } catch (error) {
            console.error('An error occurred while clearing cart:', error);
        }
    }

    // Thêm sự kiện khi trang được tải
    window.addEventListener('DOMContentLoaded', () => {
        // Lấy tất cả các input số lượng
        const quantityInputs = document.querySelectorAll('.quantity-input');
        
        // Đặt giá trị tạm thời cho mỗi input số lượng
        quantityInputs.forEach(quantityInput => {
            quantityInput.dataset.tempQuantity = quantityInput.value;
        });
    });

    fetchCart();
    
</script>
